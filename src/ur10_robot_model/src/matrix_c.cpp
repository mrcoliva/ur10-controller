#ifndef MATRIX_C_H_
#define MATRIX_C_H_

#include <ur10_robot_model/model_ur10.h>

using namespace ur;

void UR10Model::matrix_C(ow::MatrixDof &C,
                        const ow::VectorDof &q,
                        const ow::VectorDof &qp) const
{
  ow::Scalar s2 = sin(q(1));
  ow::Scalar s3 = sin(q(2));
  ow::Scalar s4 = sin(q(3));
  ow::Scalar s5 = sin(q(4));
  ow::Scalar s6 = sin(q(5));
  ow::Scalar c2 = cos(q(1));
  ow::Scalar c3 = cos(q(2));
  ow::Scalar c4 = cos(q(3));
  ow::Scalar c5 = cos(q(4));
  ow::Scalar c6 = cos(q(5));
  ow::Scalar c2c2 = c2 * c2;
  ow::Scalar c5c5 = c5 * c5;
  ow::Scalar c6c5 = c6 * c5;
  ow::Scalar c2s2 = c2 * s2;
  ow::Scalar c3s3 = c3 * s3;
  ow::Scalar c4s4 = c4 * s4;
  ow::Scalar c5s5 = c5 * s5;
  ow::Scalar c6s5 = c6 * s5;
  ow::Scalar s6s5 = s6 * s5;
  ow::Scalar c6c6 = c6 * c6;
  ow::Scalar c6c6c5s5 = (c6 * c6c5) * s5;
  ow::Scalar c6c5s6 = c6c5 * s6;
  ow::Scalar c6c5s5 = c6c5 * s5;
  ow::Scalar c5s5s6 = c5s5 * s6;
  ow::Scalar c5c4 = c5 * c4;
  ow::Scalar c6s6 = c6 * s6;
  ow::Scalar c6c5s6s5 = c6c5s6 * s5;
  ow::Scalar s5s4 = s5 * s4;
  ow::Scalar c3c2s4 = (c3 * c2) * s4;
  ow::Scalar c4s3c2 = (c4 * s3) * c2;
  ow::Scalar c4c3s2 = (c4 * c3) * s2;
  ow::Scalar s4s3s2 = (s4 * s3) * s2;
  ow::Scalar c6s6s5 = c6s6 * s5;
  ow::Scalar c5s6 = c5 * s6;
  ow::Scalar a43 = I512 * qp(4);
  ow::Scalar a44 = I612 * qp(5);
  ow::Scalar a48 = I612 * qp(1);
  ow::Scalar a49 = I612 * qp(2);
  ow::Scalar a50 = I612 * qp(3);
  ow::Scalar a51 = I613 * qp(4);
  ow::Scalar a52 = I523 * qp(1);
  ow::Scalar a53 = I523 * qp(2);
  ow::Scalar a54 = I523 * qp(3);
  ow::Scalar a55 = I623 * qp(4);
  ow::Scalar a68 = I511 * qp(4);
  ow::Scalar a69 = I522 * qp(1);
  ow::Scalar a70 = I522 * qp(2);
  ow::Scalar a71 = I522 * qp(3);
  ow::Scalar a72 = I522 * qp(4);
  ow::Scalar a73 = I533 * qp(1);
  ow::Scalar a74 = I533 * qp(2);
  ow::Scalar a75 = I533 * qp(3);
  ow::Scalar a76 = I611 * qp(1);
  ow::Scalar a77 = I611 * qp(2);
  ow::Scalar a78 = I611 * qp(3);
  ow::Scalar a79 = I623 * qp(1);
  ow::Scalar a80 = I622 * qp(4);
  ow::Scalar a81 = I623 * qp(2);
  ow::Scalar a82 = I623 * qp(3);
  ow::Scalar a83 = I633 * qp(1);
  ow::Scalar a84 = I633 * qp(2);
  ow::Scalar a85 = I633 * qp(3);
  ow::Scalar a86 = I633 * qp(4);
  ow::Scalar a87 = I613 * qp(1);
  ow::Scalar a88 = I613 * qp(2);
  ow::Scalar a89 = I613 * qp(3);
  ow::Scalar a90 = I511 * qp(1);
  ow::Scalar a91 = I511 * qp(2);
  ow::Scalar a92 = I511 * qp(3);
  ow::Scalar a93 = I611 * qp(5);
  ow::Scalar a94 = I611 * qp(4);
  ow::Scalar a95 = I622 * qp(1);
  ow::Scalar a96 = I622 * qp(2);
  ow::Scalar a97 = I622 * qp(3);
  ow::Scalar a98 = I622 * qp(5);
  ow::Scalar a118 = L12 * L12 * m6 * qp(1);
  ow::Scalar a119 = L12 * L12 * m6 * qp(2);
  ow::Scalar a120 = L12 * L12 * m6 * qp(3);
  ow::Scalar a121 = L12 * L12 * m6 * qp(4);
  ow::Scalar a122 = I523 * qp(4);
  ow::Scalar a123 = I623 * qp(5);
  ow::Scalar a124 = L3 * L5 * m6 * qp(1);
  ow::Scalar a125 = L3 * L5 * m6 * qp(2);
  ow::Scalar a126 = L3 * L5 * m6 * qp(3);
  ow::Scalar a127 = L3 * L11 * m5 * qp(1);
  ow::Scalar a128 = L3 * L11 * m5 * qp(2);
  ow::Scalar a129 = L3 * L11 * m5 * qp(3);
  ow::Scalar a130 = I513 * qp(4);
  ow::Scalar a131 = I612 * qp(4);
  ow::Scalar a132 = I613 * qp(5);
  ow::Scalar a133 = L2 * L3 * m4 * qp(1);
  ow::Scalar a134 = L2 * L3 * m5 * qp(1);
  ow::Scalar a135 = L2 * L3 * m6 * qp(1);
  ow::Scalar a136 = L2 * L9 * m3 * qp(1);
  ow::Scalar a137 = L5 * L12 * m6 * qp(1);
  ow::Scalar a138 = L5 * L12 * m6 * qp(2);
  ow::Scalar a139 = L4 * L12 * m6 * qp(4);
  ow::Scalar a140 = L5 * L12 * m6 * qp(3);
  ow::Scalar a141 = L2 * L5 * m6 * qp(1);
  ow::Scalar a142 = L2 * L11 * m5 * qp(1);
  ow::Scalar a143 = L3 * L12 * m6 * qp(4);
  ow::Scalar a147 = L3 * L12 * m6 * qp(1);
  ow::Scalar a148 = L3 * L12 * m6 * qp(2);
  ow::Scalar a149 = L3 * L12 * m6 * qp(3);
  ow::Scalar a150 = L2 * L3 * m4 * qp(2);
  ow::Scalar a151 = L2 * L3 * m5 * qp(2);
  ow::Scalar a152 = L2 * L3 * m6 * qp(2);
  ow::Scalar a153 = L2 * L9 * m3 * qp(2);
  ow::Scalar a154 = L5 * L12 * m6 * qp(4);
  ow::Scalar a155 = L2 * L12 * m6 * qp(1);
  ow::Scalar a156 = L2 * L5 * m6 * qp(2);
  ow::Scalar a157 = L2 * L5 * m6 * qp(3);
  ow::Scalar a158 = L2 * L11 * m5 * qp(2);
  ow::Scalar a159 = L2 * L11 * m5 * qp(3);
  ow::Scalar a160 = L2 * L12 * m6 * qp(4);
  ow::Scalar a161 = L2 * L12 * m6 * qp(2);
  ow::Scalar a162 = L2 * L12 * m6 * qp(3);
  ow::Scalar a163 = I312 * qp(0);
  ow::Scalar a164 = I212 * qp(0);
  ow::Scalar a165 = I412 * qp(0);
  ow::Scalar a167 = I513 * qp(0);
  ow::Scalar a168 = I612 * qp(0);
  ow::Scalar a173 = I211 * qp(0);
  ow::Scalar a174 = I222 * qp(0);
  ow::Scalar a181 = I522 * qp(0);
  ow::Scalar a182 = I533 * qp(0);
  ow::Scalar a183 = I611 * qp(0);
  ow::Scalar a184 = I623 * qp(0);
  ow::Scalar a185 = I633 * qp(0);
  ow::Scalar a186 = I613 * qp(0);
  ow::Scalar a187 = I511 * qp(0);
  ow::Scalar a188 = I622 * qp(0);
  ow::Scalar a192 = L2 * L2 * m3 * qp(0);
  ow::Scalar a193 = L2 * L2 * m4 * qp(0);
  ow::Scalar a194 = L2 * L2 * m5 * qp(0);
  ow::Scalar a196 = L2 * L2 * m6 * qp(0);
  ow::Scalar a199 = L8 * L8 * m2 * qp(0);
  ow::Scalar a203 = L12 * L12 * m6 * qp(0);
  ow::Scalar a207 = I533 * qp(4);
  ow::Scalar a218 = I633 * qp(5);
  ow::Scalar a227 = I512 * qp(0);
  ow::Scalar a228 = L3 * L12 * m6 * qp(0);
  ow::Scalar a235 = L2 * L12 * m6 * qp(0);
  ow::Scalar a236 = L4 * L12 * m6 * qp(1);
  ow::Scalar a237 = L4 * L12 * m6 * qp(2);
  ow::Scalar a238 = L4 * L12 * m6 * qp(3);
  ow::Scalar a239 = L4 * L12 * m6 * qp(0);
  ow::Scalar b1 = (-c2s2 - c3s3 - c4s4) * c5 + 2 * (c5 * c2c2 * c3s3 + c5 * c2c2 * c4s4 + c4 * c4 * c5 * c3s3 + c3 * c3 * c5 * c4s4 + (c2s2 * c3 * c3 + c2s2 * c4 * c4) * c5 + 2 * ((c2s2 * s3 * s4 * c3 * c4 - c2c2 * c4s4 * c3 * c3 - c2s2 * c3 * c3 * c4 * c4 - c2c2 * c3s3 * c4 * c4) * c5));
  ow::Scalar b2 = (-c2s2 - c3s3 - c4s4) * s5 + 2 * (c2c2 * c3s3 * s5 + c2c2 * c4s4 * s5 + c4 * c4 * c3s3 * s5 + c3 * c3 * c4s4 * s5 + (c2s2 * c3 * c3 + c2s2 * c4 * c4) * s5 + 2 * ((c2s2 * s3 * s4 * c3 * c4 - c2c2 * c4s4 * c3 * c3 - c2s2 * c3 * c3 * c4 * c4 - c2c2 * c3s3 * c4 * c4) * s5));
  ow::Scalar b3 = -s5s4 + 2 * ((c2s2 + c3 * s3) * c4 * s5 + (c3 * c3 + c2c2) * s4 * s5 + 2 * ((c2s2 * c3s3 * s4 - c3 * c3 * c4 * c2s2 - c3 * c3 * c2c2 * s4 - c3 * c4 * c2c2 * s3) * s5));
  ow::Scalar b4 = 2 * ((-c2s2 - c3s3 - c4s4) * c5 * s5 + 2 * (c3 * c3 * c5 * c2s2 * s5 + c4s4 * c3 * c3 * c5 * s5 + c4 * c4 * c5 * c2s2 * s5 + (c3s3 * c4 * c4 + c2c2 * c3s3 + c2c2 * c4s4) * c5 * s5 + 2 * ((c2s2 * s3 * s4 * s5 * c3 * c4 - c2c2 * c4s4 * s5 * c3 * c3 - c2s2 * s5 * c3 * c3 * c4 * c4 - c2c2 * c3s3 * s5 * c4 * c4) * c5)));
  ow::Scalar b5 = (-c2s2 - c3s3 - c4s4) * c5c5 + 2 * (c3 * c3 * c5 * c5 * c2s2 + c4s4 * c3 * c3 * c5 * c5 + c4 * c4 * c5 * c5 * c2s2 + c3s3 * c4 * c4 * c5 * c5 + (c2c2 * c3s3 + c2c2 * c4s4) * c5 * c5 + 2 * ((c2s2 * s3 * s4 * c3 * c4 - c2c2 * c4s4 * c3 * c3 - c2s2 * c3 * c3 * c4 * c4 - c2c2 * c3s3 * c4 * c4) * c5 * c5));
  ow::Scalar b6 = c5 + 2 * ((-c2s2 * s6 - c3s3 * s6 - c4s4 * s6) * c5 * c5 * c6 + (-c3 * c3 - c4 * c4 - c2c2) * c5 + (-c6c5) * c6 + (-c2s2 - c3s3 - c4s4) * c6s6 + 2 * ((c2s2 + c4s4) * c3 * c3 * c5 * c5 * c6 * s6 + c3 * c3 * c5 * c6 * c6 + (c4 * c4 + c2c2) * c3 * c3 * c5 + (c2s2 + c4s4) * c3 * c3 * c6 * s6 + (-c4 * s3 * s4) * c3 * c5 + (c2c2 * c3s3 + c2c2 * c4s4 + c4 * c4 * c2s2 + c4 * c4 * c3s3) * c5 * c5 * c6 * s6 + (c4 * c4 + c2c2) * c5 * c6 * c6 + (c2c2 * c4 * c4 - c2s2 * c3s3 - c2s2 * c4s4) * c5 + (c2c2 * c3s3 + c2c2 * c4s4 + c4 * c4 * c2s2 + c4 * c4 * c3s3) * c6 * s6 + 2 * ((-c6 * s6) * c3 * c3 * c4 * c4 * c5 * c5 * c2s2 + (-c6 * c6 - c2c2) * c3 * c3 * c4 * c4 * c5 + (-c6 * s6) * c3 * c3 * c4 * c4 * c2s2 + (-c6 * c2c2 * c4s4 * s6) * c3 * c3 * c5 * c5 + c4s4 * c3 * c3 * c5 * c2s2 + (-c6 * c6 * c2c2) * c3 * c3 * c5 + (-c6 * c2c2 * c4s4 * s6) * c3 * c3 + (c6 * s3 * s4 * s6) * c3 * c4 * c5 * c5 * c2s2 + (s3 * s4 * c6 * c6 + c2c2 * s3 * s4) * c3 * c4 * c5 + (c6 * s3 * s4 * s6) * c3 * c4 * c2s2 + (-c6 * c2c2 * c3s3 * s6) * c4 * c4 * c5 * c5 + c3s3 * c4 * c4 * c5 * c2s2 + (-c6 * c6 * c2c2) * c4 * c4 * c5 + (-c6 * c2c2 * c3s3 * s6) * c4 * c4 + (c6 * c6 * c3s3 + c6 * c6 * c4s4) * c5 * c2s2 + 2 * ((c2c2 * c3 * c3 * c4 * c4 * c6 * c6 - c2s2 * c4s4 * c3 * c3 * c6 * c6 - c2c2 * s3 * s4 * c3 * c4 * c6 * c6 - c2s2 * c3s3 * c4 * c4 * c6 * c6) * c5))));
  ow::Scalar b7 = (c2s2 * s4 - c4 * c2c2) * c3 + ((c2c2 * s3) * s4 + s3 * c4 * c2s2);
  ow::Scalar b8 = (c3 * c2s2 * s4 - c3 * c4 * c2c2 + c4 * c2s2 * s3 + c2c2 * s3 * s4) * c5;
  ow::Scalar b9 = (c3 * c4 * c2s2 + c3 * c2c2 * s4 + c4 * c2c2 * s3 - c2s2 * s3 * s4) * s5;
  ow::Scalar b10 = -c6s5 + 2 * ((-c2s2 - c3s3 - c4s4) * c5 * s5 * s6 + (c3 * c3 + c4 * c4 + c2c2) * c6 * s5 + 2 * ((c2c2 * c3s3 + c2c2 * c4s4 + c3 * c3 * c2s2 + c4 * c4 * c2s2 + c4 * c4 * c3s3 + c3 * c3 * c4s4) * c5 * s5 * s6 + (s3 * s4 * c3 * c4 - c2c2 * c3 * c3 - c3 * c3 * c4 * c4 - c2c2 * c4 * c4 + c2s2 * c3s3 + c2s2 * c4s4) * c6 * s5 + 2 * ((c3 * c3 * c4 * c4 * c6 * c2c2 - c3 * c3 * c6 * c2s2 * c4s4 - c4 * c4 * c6 * c2s2 * c3s3 - c3 * c3 * c4 * c4 * c5 * c2s2 * s6 - c4 * c4 * c5 * c2c2 * c3s3 * s6 - c3 * c3 * c5 * c2c2 * c4s4 * s6 - c3 * c4 * c6 * c2c2 * s3 * s4 + c3 * c4 * c5 * c2s2 * s3 * s4 * s6) * s5)));
  ow::Scalar b11 = (1 - c6c6 - c5c5 * c6 * c6) * c2s2 + (c6c5s6 + (1 - c6 * c6 * c5c5) * c3s3 + (1 - c6 * c6 * c5c5) * c4s4 - c6c6 * c3s3 - c6c6 * c4s4) + 2 * ((c2s2 + c4s4 + c5 * c5 * c2s2 + c5 * c5 * c4s4) * c3 * c3 * c6 * c6 + (-c5 * s6) * c3 * c3 * c6 + (-c2s2 - c4s4) * c3 * c3 + (c2s2 + c3s3 + c5 * c5 * c2s2 + c5 * c5 * c3s3) * c4 * c4 * c6 * c6 + (-c5 * s6) * c4 * c4 * c6 + (-c2s2 - c3s3) * c4 * c4 + (c3s3 + c4s4 + c5 * c5 * c3s3 + c5 * c5 * c4s4) * c6 * c6 * c2c2 + (-c5 * s6) * c6 * c2c2 + (-c3s3 - c4s4) * c2c2 + 2 * ((1 - c6 * c6 - c5 * c5 * c6 * c6) * c3 * c3 * c4 * c4 * c2s2 + (c5 * c6 * s6) * c3 * c3 * c4 * c4 + (s6 * c5 * c6 - c4s4 * c5 * c5 * c6 * c6 - c4s4 * c6 * c6 + c4s4) * c3 * c3 * c2c2 + (s3 * s4 * c5 * c5 * c6 * c6 + s3 * s4 * c6 * c6 - s3 * s4) * c3 * c4 * c2s2 + (-c5 * c6 * s3 * s4 * s6) * c3 * c4 + (s6 * c5 * c6 - c3s3 * c5 * c5 * c6 * c6 - c3s3 * c6 * c6 + c3s3) * c4 * c4 * c2c2 + (-c5 * c6 * c3s3 * s6 - c5 * c6 * c4s4 * s6) * c2s2 + 2 * ((c2s2 * c3s3 - c3 * c3 * c2c2) * c4 * c4 * c5 * c6 * s6 + (c3 * c2c2 * s3 * s4) * c4 * c5 * c6 * s6 + (c3 * c3 * c2s2 * c4s4) * c5 * c6 * s6)));
  ow::Scalar b12 = -1 + 2 * (c2c2 + c3 * c3 + 2 * (c2s2 * c3s3 - c3 * c3 * c2c2));
  ow::Scalar b13 = -c2s2 - c3s3 + 2 * (c2c2 * c3s3 + c3 * c3 * c2s2);
  ow::Scalar b14 = (1 - c6 * c6) * c5c5 * c2s2 + (1 - c6 * c6) * c5c5 * c3s3 + (c4s4 - c6 * c6 * c4s4) * c5c5 - c6c6 * c2s2 - c6c6 * c3s3 + (-c4s4) * c6c6 + c6c5s6 + 2 * ((c2s2 + c4s4) * c3 * c3 * c5 * c5 * c6 * c6 + (-c2s2 - c4s4) * c3 * c3 * c5 * c5 + (-s6) * c3 * c3 * c5 * c6 + (c2s2 + c4s4) * c3 * c3 * c6 * c6 + (c2s2 + c3s3) * c4 * c4 * c5 * c5 * c6 * c6 + (-c2s2 - c3s3) * c4 * c4 * c5 * c5 + (-s6) * c4 * c4 * c5 * c6 + (c2s2 + c3s3) * c4 * c4 * c6 * c6 + (c2c2 * c3s3 + c2c2 * c4s4) * c5 * c5 * c6 * c6 + (-c2c2 * c3s3 - c2c2 * c4s4) * c5 * c5 + (-c2c2 * s6) * c5 * c6 + (c2c2 * c3s3 + c2c2 * c4s4) * c6 * c6 + 2 * ((1 - c6 * c6) * c3 * c3 * c4 * c4 * c5 * c5 * c2s2 + (c6 * s6) * c3 * c3 * c4 * c4 * c5 + (-c6 * c6) * c3 * c3 * c4 * c4 * c2s2 + (c2c2 * c4s4 - c6 * c6 * c2c2 * c4s4) * c3 * c3 * c5 * c5 + (c6 * c2c2 * s6) * c3 * c3 * c5 + (-c6 * c6 * c2c2 * c4s4) * c3 * c3 + (c6 * c6 * s3 * s4 - s3 * s4) * c3 * c4 * c5 * c5 * c2s2 + (-c6 * s3 * s4 * s6) * c3 * c4 * c5 + (c6 * c6 * s3 * s4) * c3 * c4 * c2s2 + (c2c2 * c3s3 - c6 * c6 * c2c2 * c3s3) * c4 * c4 * c5 * c5 + (c6 * c2c2 * s6) * c4 * c4 * c5 + (-c6 * c6 * c2c2 * c3s3) * c4 * c4 + (-c6 * c3s3 * s6 - c6 * c4s4 * s6) * c5 * c2s2 + 2 * ((c2s2 * c3s3 - c3 * c3 * c2c2) * c4 * c4 * c5 * c6 * s6 + (c3 * c2c2 * s3 * s4) * c4 * c5 * c6 * s6 + (c3 * c3 * c2s2 * c4s4) * c5 * c6 * s6)));
  ow::Scalar b15 = (c2s2 + c3s3 + c4s4) * s5 + 2 * ((-c5 * c6 * s6) * c2c2 * s5 - c2c2 * c4s4 * s5 - c2c2 * c3s3 * s5 + (-c4 * c4 - c6c6) * c3s3 * s5 + (-c3 * c3 - c6c6) * c4s4 * s5 + (-c6c6 * c2s2 - c3 * c3 * c2s2 - c4 * c4 * c2s2 - c3 * c3 * c5 * c6 * s6 - c4 * c4 * c5 * c6 * s6) * s5 + c6c5s6s5 + 2 * ((c2s2 + c3s3) * c4 * c4 * c6 * c6 * s5 + (c5 * s6) * c4 * c4 * c6 * c2c2 * s5 + (c3 * c3 * c5 * s6) * c4 * c4 * c6 * s5 + c3s3 * c4 * c4 * c2c2 * s5 + (c3 * c3 * c2s2) * c4 * c4 * s5 + (-c3 * c5 * s3 * s4 * s6) * c4 * c6 * s5 + (-c3 * c2s2 * s3 * s4) * c4 * s5 + (c3s3 + c4s4) * c6 * c6 * c2c2 * s5 + (c3 * c3 * c2s2 + c3 * c3 * c4s4) * c6 * c6 * s5 + (c3 * c3 * c5 * s6) * c6 * c2c2 * s5 + (-c5 * c2s2 * c3s3 * s6 - c5 * c2s2 * c4s4 * s6) * c6 * s5 + (c3 * c3 * c4s4) * c2c2 * s5 + 2 * ((c2s2 * c3s3 * s6 - c3 * c3 * c2c2 * s6) * c4 * c4 * c5 * c6 * s5 + (-c2s2 * c3 * c3 - c2c2 * c3s3) * c4 * c4 * c6 * c6 * s5 + (c3 * c2c2 * s3 * s4 * s6) * c4 * c5 * c6 * s5 + (c3 * c2s2 * s3 * s4) * c4 * c6 * c6 * s5 + (c3 * c3 * c2s2 * c4s4 * s6) * c5 * c6 * s5 + (-c3 * c3 * c2c2 * c4s4) * c6 * c6 * s5)));
  ow::Scalar b16 = (c3 * c3 + c2c2 - 1) * c4 + (-c2s2 - c3s3) * s4 + 2 * ((c3s3 * s4 - c3 * c3 * c4) * c2c2 + ((c2s2 * s3) * c3 * c4 + c2s2 * c3 * c3 * s4));
  ow::Scalar b17 = (c3 * c3 + c2c2) * c4 * c5 + (-c2s2 - c3s3) * c5 * s4 - c5c4 + 2 * ((c2c2 * c3s3 * s4 - c3 * c3 * c4 * c2c2 + c3 * c3 * c2s2 * s4 + c3 * c4 * c2s2 * s3) * c5);
  ow::Scalar b18 = (-c2s2 - c3s3 - c4s4) * c5 * s6 + (1 - c4 * c4 - c2c2 - c3 * c3) * c6 + 2 * (c3 * c3 * c5 * c5 * c6 + (c2s2 + c4s4) * c3 * c3 * c5 * s6 + (c4 * c4 + c2c2) * c3 * c3 * c6 + (-c4 * s3 * s4) * c3 * c6 + (c4 * c4 + c2c2) * c5 * c5 * c6 + (c2c2 * c3s3 + c2c2 * c4s4 + c4 * c4 * c2s2 + c4 * c4 * c3s3) * c5 * s6 + (c2c2 * c4 * c4 - c5c5 - c2s2 * c3s3 - c2s2 * c4s4) * c6 + 2 * ((-c5 * c5 - c2c2) * c3 * c3 * c4 * c4 * c6 + (-c5 * s6) * c3 * c3 * c4 * c4 * c2s2 + c4s4 * c3 * c3 * c6 * c2s2 + (-c5 * c5 * c2c2) * c3 * c3 * c6 + (-c5 * c2c2 * c4s4 * s6) * c3 * c3 + (s3 * s4 * c5 * c5 + c2c2 * s3 * s4) * c3 * c4 * c6 + (c5 * s3 * s4 * s6) * c3 * c4 * c2s2 + c3s3 * c4 * c4 * c6 * c2s2 + (-c5 * c5 * c2c2) * c4 * c4 * c6 + (-c5 * c2c2 * c3s3 * s6) * c4 * c4 + (c5 * c5 * c3s3 + c5 * c5 * c4s4) * c6 * c2s2 + 2 * ((c6 * c2c2 * c3 * c3 * c4 * c4 - c6 * c2s2 * c4s4 * c3 * c3 - c6 * c2c2 * s3 * s4 * c3 * c4 - c6 * c2s2 * c3s3 * c4 * c4) * c5 * c5)));
  ow::Scalar b19 = (c3 * c3 + c4 * c4 + c2c2) * c5 * c6 * c6 * s5 + (-c2s2 - c3s3 - c4s4) * c6s6 * s5 - c6c6c5s5 + 2 * ((s3 * s4 * c3 * c4 - c2c2 * c3 * c3 - c3 * c3 * c4 * c4 - c2c2 * c4 * c4 + c2s2 * c3s3 + c2s2 * c4s4) * c5 * c6 * c6 * s5 + (c2c2 * c3s3 + c2c2 * c4s4 + c3 * c3 * c2s2 + c4 * c4 * c2s2 + c4 * c4 * c3s3 + c3 * c3 * c4s4) * c6 * s5 * s6 + 2 * ((c5 * c2c2 * c3 * c3 * c4 * c4 * c6 * c6 - c2s2 * s6 * c3 * c3 * c4 * c4 * c6 - c5 * c2s2 * c4s4 * c3 * c3 * c6 * c6 - c2c2 * c4s4 * s6 * c3 * c3 * c6 - c5 * c2c2 * s3 * s4 * c3 * c4 * c6 * c6 + c2s2 * s3 * s4 * s6 * c3 * c4 * c6 - c5 * c2s2 * c3s3 * c4 * c4 * c6 * c6 - c2c2 * c3s3 * s6 * c4 * c4 * c6) * s5));
  ow::Scalar b20 = c3 * c4 - s3 * s4 + 2 * ((c2s2 * s4 - c4 * c2c2) * c3 + ((c2c2 * s3) * s4 + s3 * c4 * c2s2));
  ow::Scalar b21 = c5 + 2 * ((-c3 * c3 - c4 * c4 - c2c2) * c5 + 2 * (c3 * c3 * c4 * c4 * c5 + c2c2 * c3 * c3 * c5 + (-s3 * s4) * c3 * c4 * c5 + c2c2 * c4 * c4 * c5 + (-c3s3 - c4s4) * c5 * c2s2 + 2 * ((c2s2 * c4s4 * c3 * c3 - c2c2 * c3 * c3 * c4 * c4 + c2c2 * s3 * s4 * c3 * c4 + c2s2 * c3s3 * c4 * c4) * c5)));
  ow::Scalar b22 = -s3 + 2 * (c3 * c2s2 + c2c2 * s3);
  ow::Scalar b23 = (c2s2 + c3 * s3) * c4 * s5 + (c3 * c3 + c2c2) * s4 * s5 - s5s4 + 2 * ((c2s2 * c3s3 * s4 - c3 * c3 * c4 * c2s2 - c3 * c3 * c2c2 * s4 - c3 * c4 * c2c2 * s3) * s5);
  ow::Scalar b24 = (-c3 * c3 - c4 * c4 - c2c2) * c5 * c5 + (c5c5 - c3 * c3 - c4 * c4 - c2c2) + 2 * (c3 * c3 * c5 * c5 * c6 * c6 + c3 * c3 * c5 * c5 * c2c2 + c4 * c4 * c3 * c3 * c5 * c5 + c3 * c3 * c6 * c6 + c3 * c3 * c2c2 + c4 * c4 * c3 * c3 + (-c4 * s3 * s4) * c3 * c5 * c5 + (-c4 * s3 * s4) * c3 + c5 * c5 * c6 * c6 * c2c2 + c4 * c4 * c5 * c5 * c6 * c6 + c4 * c4 * c5 * c5 * c2c2 + (-c2s2 * c3s3 - c2s2 * c4s4) * c5 * c5 + c6 * c6 * c2c2 + (c4 * c4 - c5c5) * c6 * c6 + c4 * c4 * c2c2 - (c2s2 * c3s3 + c2s2 * c4s4) + 2 * ((-c3 * c3 - c2c2) * c4 * c4 * c5 * c5 * c6 * c6 + c3s3 * c4 * c4 * c5 * c5 * c2s2 + (-c3 * c3 * c2c2) * c4 * c4 * c5 * c5 + (-c3 * c3 - c2c2) * c4 * c4 * c6 * c6 + c3s3 * c4 * c4 * c2s2 + (-c3 * c3 * c2c2) * c4 * c4 + (c3 * s3 * s4) * c4 * c5 * c5 * c6 * c6 + (c3 * c2c2 * s3 * s4) * c4 * c5 * c5 + (c3 * s3 * s4) * c4 * c6 * c6 + (c3 * c2c2 * s3 * s4) * c4 + (c3s3 + c4s4) * c5 * c5 * c6 * c6 * c2s2 + (-c3 * c3 * c2c2) * c5 * c5 * c6 * c6 + (c3 * c3 * c4s4) * c5 * c5 * c2s2 + (-s6) * c5 * c6 * c2s2 + (-c3s3 * s6 - c4s4 * s6) * c5 * c6 + (c3s3 + c4s4) * c6 * c6 * c2s2 + (-c3 * c3 * c2c2) * c6 * c6 + (c3 * c3 * c4s4) * c2s2 + 2 * ((c5 * c5 + 1) * c3 * c3 * c4 * c4 * c6 * c6 * c2c2 + (-c2s2 * c4s4 * c5 * c5 - c2s2 * c4s4) * c3 * c3 * c6 * c6 + (c5 * c2s2 * s6 + c5 * c4s4 * s6) * c3 * c3 * c6 + (-s3 * s4) * c3 * c4 * c6 * c6 * c2c2 + (-c2s2 * c3s3 * c5 * c5 - c2s2 * c3s3) * c4 * c4 * c6 * c6 + (c5 * c2s2 * s6 + c5 * c3s3 * s6) * c4 * c4 * c6 + (-c5 * c5 * c3s3 * c4s4) * c6 * c6 * c2c2 + (c5 * c3s3 * s6 + c5 * c4s4 * s6) * c6 * c2c2 + 2 * ((c3 * c4 * s3 * s4 - c3 * c3 * c4 * c4) * c5 * c6 * c2s2 * s6 + (-c2c2 * c4s4 * c3 * c3 - c2c2 * c3s3 * c4 * c4) * c5 * c6 * s6))));
  ow::Scalar b25 = c2c2 + c3 * c3 + c4 * c4 - 1 + 2 * ((-c4 * c4 - c5 * c5 - c2c2) * c3 * c3 + (c4 * s3 * s4) * c3 + (c5c5 + c2s2 * c3s3 + c2s2 * c4s4 - c4 * c4 * c2c2 - c5 * c5 * c2c2 - c4 * c4 * c5 * c5) + 2 * (c3 * c3 * c4 * c4 * c5 * c5 + c3 * c3 * c4 * c4 * c2c2 + c3 * c3 * c5 * c5 * c2c2 + (-c2s2 * c4s4) * c3 * c3 + (-s3 * s4) * c3 * c4 * c5 * c5 + (-s3 * s4) * c3 * c4 * c2c2 + c4 * c4 * c5 * c5 * c2c2 + (-c2s2 * c3s3) * c4 * c4 + (-c2s2 * c3s3 - c2s2 * c4s4) * c5 * c5 + 2 * ((c2s2 * c4s4 * c3 * c3 - c2c2 * c3 * c3 * c4 * c4 + c2c2 * s3 * s4 * c3 * c4 + c2s2 * c3s3 * c4 * c4) * c5 * c5)));
  ow::Scalar b26 = (-c2s2 - c3s3 - c4s4) * c5 * c6 + (c3 * c3 + c4 * c4 + c2c2 - 1) * s6 + 2 * ((c2s2 + c4s4) * c3 * c3 * c5 * c6 - c3 * c3 * c5 * c5 * s6 + (-c4 * c4 - c2c2) * c3 * c3 * s6 + (c4 * s3 * s4) * c3 * s6 + (-c4 * c4 - c2c2) * c5 * c5 * s6 + (c2c2 * c3s3 + c2c2 * c4s4 + c4 * c4 * c2s2 + c4 * c4 * c3s3) * c5 * c6 + (c5c5 - c2c2 * c4 * c4 + c2s2 * c3s3 + c2s2 * c4s4) * s6 + 2 * (c3 * c3 * c4 * c4 * c5 * c5 * s6 + (-c6 * c2s2) * c3 * c3 * c4 * c4 * c5 + c2c2 * c3 * c3 * c4 * c4 * s6 + c2c2 * c3 * c3 * c5 * c5 * s6 + (-c6 * c2c2 * c4s4) * c3 * c3 * c5 + (-c2s2 * c4s4) * c3 * c3 * s6 + (-s3 * s4) * c3 * c4 * c5 * c5 * s6 + (c6 * c2s2 * s3 * s4) * c3 * c4 * c5 + (-c2c2 * s3 * s4) * c3 * c4 * s6 + c2c2 * c4 * c4 * c5 * c5 * s6 + (-c6 * c2c2 * c3s3) * c4 * c4 * c5 + (-c2s2 * c3s3) * c4 * c4 * s6 + (-c2s2 * c3s3 - c2s2 * c4s4) * c5 * c5 * s6 + 2 * ((c2s2 * c4s4 * s6 * c3 * c3 - c2c2 * s6 * c3 * c3 * c4 * c4 + c2c2 * s3 * s4 * s6 * c3 * c4 + c2s2 * c3s3 * s6 * c4 * c4) * c5 * c5)));
  ow::Scalar b27 = (c3 * c3 + c4 * c4 + c2c2) * c5 * c6 * c6 * s5 + (-c3 * c3 - c4 * c4 - c2c2) * c5 * s5 + (-c2s2 - c3s3 - c4s4) * c6s6 * s5 + (c5s5 - c6c6c5s5) + 2 * ((1 - c6 * c6) * c3 * c3 * c5 * c2c2 * s5 + (c4 * c4 - c4 * c4 * c6 * c6) * c3 * c3 * c5 * s5 + (c6 * c2s2 * s6 + c6 * c4s4 * s6) * c3 * c3 * s5 + (c4 * c6 * c6 * s3 * s4 - c4 * s3 * s4) * c3 * c5 * s5 + (c4 * c4 - c4 * c4 * c6 * c6) * c5 * c2c2 * s5 + (c6 * c6 * c2s2 * c3s3 - c2s2 * c4s4 - c2s2 * c3s3 + c6 * c6 * c2s2 * c4s4) * c5 * s5 + (c6 * c3s3 * s6 + c6 * c4s4 * s6) * c2c2 * s5 + (c4 * c4 * c6 * c2s2 * s6 + c4 * c4 * c6 * c3s3 * s6) * s5 + 2 * ((c3s3 - c6 * c6 * c3s3) * c4 * c4 * c5 * c2s2 * s5 + (c3 * c3 * c6 * c6 * c2c2 - c3 * c3 * c2c2) * c4 * c4 * c5 * s5 + (-c3 * c3 * c6 * s6) * c4 * c4 * c2s2 * s5 + (-c6 * c2c2 * c3s3 * s6) * c4 * c4 * s5 + (c3 * c2c2 * s3 * s4 - c3 * c6 * c6 * c2c2 * s3 * s4) * c4 * c5 * s5 + (c3 * c6 * s3 * s4 * s6) * c4 * c2s2 * s5 + (c3 * c3 * c4s4 - c3 * c3 * c6 * c6 * c4s4) * c5 * c2s2 * s5 + (-c3 * c3 * c6 * c2c2 * c4s4 * s6) * s5));
  ow::Scalar b28 = (-c3 * c3 - c4 * c4 - c2c2) * c5 * s5 * s6 + (-c2s2 - c3s3 - c4s4) * c6 * s5 + c5s5s6 + 2 * ((c3 * c3 * c4 * c4 + c2c2 * c3 * c3 - s3 * s4 * c3 * c4 + c2c2 * c4 * c4 - c2s2 * c3s3 - c2s2 * c4s4) * c5 * s5 * s6 + (c2c2 * c3s3 + c2c2 * c4s4 + c3 * c3 * c2s2 + c4 * c4 * c2s2 + c4 * c4 * c3s3 + c3 * c3 * c4s4) * c6 * s5 + 2 * ((c4 * c4 * c5 * c2s2 * c3s3 * s6 - c3 * c3 * c6 * c2c2 * c4s4 - c3 * c3 * c4 * c4 * c6 * c2s2 - c3 * c3 * c4 * c4 * c5 * c2c2 * s6 - c4 * c4 * c6 * c2c2 * c3s3 + c3 * c3 * c5 * c2s2 * c4s4 * s6 + c3 * c4 * c6 * c2s2 * s3 * s4 + c3 * c4 * c5 * c2c2 * s3 * s4 * s6) * s5));
  ow::Scalar b29 = (c3 * c3 + c4 * c4 + c2c2) * c5 * s5 - c5s5 + 2 * ((-c3 * c3 - c2c2) * c4 * c4 * c5 * s5 + (c3 * s3 * s4) * c4 * c5 * s5 + (c3s3 + c4s4) * c5 * c2s2 * s5 + (-c3 * c3 * c2c2) * c5 * s5 + 2 * ((c2c2 * s5 * c3 * c3 * c4 * c4 - c2s2 * c4s4 * s5 * c3 * c3 - c2c2 * s3 * s4 * s5 * c3 * c4 - c2s2 * c3s3 * s5 * c4 * c4) * c5));
  ow::Scalar b30 = s6s5 + 2 * ((-c2s2 - c3s3 - c4s4) * c5 * c6 * s5 + (-c3 * c3 - c4 * c4 - c2c2) * s5 * s6 + 2 * ((c2c2 * c3s3 + c2c2 * c4s4 + c3 * c3 * c2s2 + c4 * c4 * c2s2 + c4 * c4 * c3s3 + c3 * c3 * c4s4) * c5 * c6 * s5 + (c3 * c3 * c4 * c4 + c2c2 * c3 * c3 - s3 * s4 * c3 * c4 + c2c2 * c4 * c4 - c2s2 * c3s3 - c2s2 * c4s4) * s5 * s6 + 2 * ((c4 * c4 * c2s2 * c3s3 * s6 + c3 * c3 * c2s2 * c4s4 * s6 - c3 * c3 * c4 * c4 * c2c2 * s6 - c3 * c3 * c4 * c4 * c5 * c6 * c2s2 - c4 * c4 * c5 * c6 * c2c2 * c3s3 - c3 * c3 * c5 * c6 * c2c2 * c4s4 + c3 * c4 * c2c2 * s3 * s4 * s6 + c3 * c4 * c5 * c6 * c2s2 * s3 * s4) * s5)));
  ow::Scalar b31 = (c2s2 + c3s3 + c4s4) * c5c5 - (1 * c2s2 + 1 * c3s3 + 1 * c4s4) + 2 * ((-c4 * c4) * c5 * c5 * c3s3 - c5 * c5 * c2c2 * c4s4 - c5 * c5 * c2c2 * c3s3 + (-c3 * c3) * c5 * c5 * c4s4 + (-c2s2 * c3 * c3 - c2s2 * c4 * c4) * c5 * c5 + c2c2 * c3s3 + c2c2 * c4s4 + c4 * c4 * c3s3 + c3 * c3 * c4s4 + (c2s2 * c3 * c3 + c2s2 * c4 * c4) + 2 * ((c2s2 * c4 * c4 * c5 * c5 - c2s2 * c4 * c4 + c2c2 * c4s4 * c5 * c5 - c2c2 * c4s4) * c3 * c3 + (c4 * c2s2 * s3 * s4 - c4 * c5 * c5 * c2s2 * s3 * s4) * c3 + ((c2c2 * c3s3) * c4 * c4 * c5 * c5 + (-c2c2 * c3s3) * c4 * c4)));
  ow::Scalar b32 = -s5 + 2 * ((c3 * c3 + c4 * c4 + c2c2) * s5 + 2 * ((-c2c2) * c3 * c3 * s5 - c3 * c3 * c4 * c4 * s5 + (s3 * s4) * c3 * c4 * s5 + (-c2c2) * c4 * c4 * s5 + (c3s3 + c4s4) * c2s2 * s5 + 2 * ((c2c2 * c3 * c3 * c4 * c4 - c2s2 * c4s4 * c3 * c3 - c2c2 * s3 * s4 * c3 * c4 - c2s2 * c3s3 * c4 * c4) * s5)));
  ow::Scalar b33 = -1 + 2 * c2c2;
  ow::Scalar b34 = (c3 * c3 + c4 * c4 + c2c2) * c5 * c6 * s5 + (-c2s2 - c3s3 - c4s4) * s5 * s6 - c6c5s5 + 2 * ((s3 * s4 * c3 * c4 - c2c2 * c3 * c3 - c3 * c3 * c4 * c4 - c2c2 * c4 * c4 + c2s2 * c3s3 + c2s2 * c4s4) * c5 * c6 * s5 + (c2c2 * c3s3 + c2c2 * c4s4 + c3 * c3 * c2s2 + c4 * c4 * c2s2 + c4 * c4 * c3s3 + c3 * c3 * c4s4) * s5 * s6 + 2 * ((c3 * c3 * c4 * c4 * c5 * c6 * c2c2 - c3 * c3 * c2c2 * c4s4 * s6 - c3 * c3 * c4 * c4 * c2s2 * s6 - c4 * c4 * c2c2 * c3s3 * s6 - c4 * c4 * c5 * c6 * c2s2 * c3s3 - c3 * c3 * c5 * c6 * c2s2 * c4s4 + c3 * c4 * c2s2 * s3 * s4 * s6 - c3 * c4 * c5 * c6 * c2c2 * s3 * s4) * s5));
  ow::Scalar b35 = c3 * c2s2 + c2c2 * s3;
  ow::Scalar b36 = -c4 + 2 * ((c3 * c3 + c2c2) * c4 + (-c2s2 - c3s3) * s4 + 2 * ((c3s3 * s4 - c3 * c3 * c4) * c2c2 + ((c2s2 * s3) * c3 * c4 + c2s2 * c3 * c3 * s4)));
  ow::Scalar b37 = (c3 * c3 + c4 * c4 + c2c2) * c5 * c5 * c6 * s6 + (-c2s2 - c3s3 - c4s4) * c5 + (c3 * c3 + c4 * c4 + c2c2 - c5c5) * c6 * s6 + 2 * ((c3s3 + c4s4) * c5 * c5 * c6 * c2s2 * s6 + (s3 * s4 * c3 * c4 - c2c2 * c3 * c3 - c3 * c3 * c4 * c4 - c2c2 * c4 * c4) * c5 * c5 * c6 * s6 + (c3 * c3 + c4 * c4 + c6c6) * c5 * c2s2 + (c4s4 * c3 * c3 + c3s3 * c4 * c4 + c2c2 * c3s3 + c2c2 * c4s4 + c6c6 * c3s3 + c6c6 * c4s4) * c5 + (c3s3 + c4s4) * c6 * c2s2 * s6 + (s3 * s4 * c3 * c4 - c2c2 * c3 * c3 - c3 * c3 * c4 * c4 - c2c2 * c4 * c4) * c6 * s6 + 2 * ((c2c2 * s6) * c3 * c3 * c4 * c4 * c5 * c5 * c6 + (-c2s2) * c3 * c3 * c4 * c4 * c5 + (c2c2 * s6) * c3 * c3 * c4 * c4 * c6 + (-c2s2 * c4s4 * s6) * c3 * c3 * c5 * c5 * c6 + (-c2s2 - c4s4) * c3 * c3 * c5 * c6 * c6 + (-c2c2 * c4s4) * c3 * c3 * c5 + (-c2s2 * c4s4 * s6) * c3 * c3 * c6 + (-c2c2 * s3 * s4 * s6) * c3 * c4 * c5 * c5 * c6 + (c2s2 * s3 * s4) * c3 * c4 * c5 + (-c2c2 * s3 * s4 * s6) * c3 * c4 * c6 + (-c2s2 * c3s3 * s6) * c4 * c4 * c5 * c5 * c6 + (-c2s2 - c3s3) * c4 * c4 * c5 * c6 * c6 + (-c2c2 * c3s3) * c4 * c4 * c5 + (-c2s2 * c3s3 * s6) * c4 * c4 * c6 + (-c2c2 * c3s3 - c2c2 * c4s4) * c5 * c6 * c6 + 2 * ((c2s2 * c3 * c3 * c4 * c4 * c6 * c6 + c2c2 * c4s4 * c3 * c3 * c6 * c6 - c2s2 * s3 * s4 * c3 * c4 * c6 * c6 + c2c2 * c3s3 * c4 * c4 * c6 * c6) * c5)));
  ow::Scalar b38 = -1 + 2 * (c2c2 + c3 * c3 + c4 * c4 + 2 * ((s3 * s4) * c3 * c4 - c3 * c3 * c2c2 - c3 * c3 * c4 * c4 - c4 * c4 * c2c2 + (c3s3 + c4s4) * c2s2 + 2 * ((c4 * c4 * c2c2 - c2s2 * c4s4) * c3 * c3 + (-c4 * c2c2 * s3 * s4) * c3 + (-c3s3) * c4 * c4 * c2s2)));
  ow::Scalar b39 = -c2s2 - c3s3 - c4s4 + 2 * ((c3s3 + c4s4) * c2c2 + (c2s2 * c3 * c3 + c4 * c4 * c2s2 + c4 * c4 * c3s3 + c3 * c3 * c4s4) + 2 * ((c3 * c4 * s3 * s4 - c3 * c3 * c4 * c4) * c2s2 + ((-c3s3) * c4 * c4 * c2c2 + (-c4s4) * c3 * c3 * c2c2)));
  ow::Scalar b40 = c3 * s5s4 + c4 * s3 * s5 + 2 * ((c2s2 * s3 * s4 - c3 * c2c2 * s4 - c4 * c2c2 * s3 - c3 * c4 * c2s2) * s5);
  ow::Scalar b41 = (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * c5 * c5 * s6 + (c2 * s3 * s4 - c2 * c3 * c4 + c3 * s2 * s4 + c4 * s2 * s3) * c5 * c6;
  ow::Scalar b42 = (c2 * c6s5 * s3 * s4 + c3 * c6s5 * s2 * s4 + c4 * c6s5 * s2 * s3 - c2 * c3 * c4 * c6s5) * c5 * c6 + (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * c6s6 * s5;
  ow::Scalar b43 = (s3 * s4 - c3 * c4) * c2 + ((c4 * s2) * s3 + s2 * c3 * s4);
  ow::Scalar b44 = (s3 * s4 - c3 * c4) * c2 * s6 + (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * c5 * c6 + (c3 * s2 * s4 + c4 * s2 * s3) * s6 + 2 * ((c2 * c3 * c4 * s6 - c3 * s2 * s4 * s6 - c4 * s2 * s3 * s6 - c2 * s3 * s4 * s6) * c5c5);
  ow::Scalar b45 = c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2;
  ow::Scalar b46 = (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * c5;
  ow::Scalar b47 = (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * s5;
  ow::Scalar b48 = (c2 * s3 * s4 - c2 * c3 * c4 + c4 * s2 * s3) * s5 + s5s4 * c3 * s2;
  ow::Scalar b49 = (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * c5 * c5;
  ow::Scalar b50 = (c3 * s2 * s5s4 + c2 * s3 * s4 * s5 + c4 * s2 * s3 * s5 - c2 * c3 * c4 * s5) * c5;
  ow::Scalar b51 = (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * c5 * c6 * s5 * s6 + (c2 * c6s5 * s3 * s4 + c3 * c6s5 * s2 * s4 + c4 * c6s5 * s2 * s3 - c2 * c3 * c4 * c6s5) * c6 + 0.5 * ((c2 * c3 * c4 - c2 * s3 * s4 - c4 * s2 * s3) * s5 + (-s2 * s5s4) * c3);
  ow::Scalar b52 = 0.5 * (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2);
  ow::Scalar b53 = 0.5 * ((c2 * s3 * s4 - c2 * c3 * c4 + c4 * s2 * s3) * s5 + s5s4 * c3 * s2);
  ow::Scalar b54 = 2 * ((c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * c5 * s5);
  ow::Scalar b55 = 2 * ((c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * c5 * c6 * s5);
  ow::Scalar b56 = 2 * ((c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * c5 * s5 * s6);
  ow::Scalar b57 = (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * s5 + 2 * ((c2 * s3 * s4 * s6s5 + c3 * s2 * s4 * s6s5 + c4 * s2 * s3 * s6s5 - c2 * c3 * c4 * s6s5) * c5 * c6 + (s4s3s2 - c4c3s2 - c4s3c2 - c3c2s4) * c6c6 * s5);
  ow::Scalar b58 = (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * c5 * s5 + 2 * ((s4s3s2 - c4c3s2 - c4s3c2 - c3c2s4) * c5 * c6c6 * s5 + (c2 * s3 * s4 * s6s5 + c3 * s2 * s4 * s6s5 + c4 * s2 * s3 * s6s5 - c2 * c3 * c4 * s6s5) * c6);
  ow::Scalar b59 = 2 * ((s4s3s2 - c4c3s2 - c4s3c2 - c3c2s4) * c5 * c5 * c6 * s6 + (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * c6s6);
  ow::Scalar b60 = c2 * c3 - s2 * s3;
  ow::Scalar b61 = (c2 * c3 - s2 * s3) * c5;
  ow::Scalar b62 = c5 * c5 * s4s3s2 + (-c3c2s4 - c4c3s2 - c4s3c2) * c5 * c5 - c5c5 * c6c6 * s4s3s2 + (c3c2s4 + c4c3s2 + c4s3c2) * c5c5 * c6c6 + c6c6 * s4s3s2 + (-c3c2s4 - c4c3s2 - c4s3c2) * c6c6 + 0.5 * (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2);
  ow::Scalar b63 = (c2 * c4) * c3 * c5 * s5 + (c6 * c6s5 * s2 * s4 - s2 * s5s4 - c2 * c4 * c6 * c6s5) * c3 * c5 + (-c2 * s3 * s4 - c4 * s2 * s3) * c5 * s5 + (c2 * c6 * c6s5 * s3 * s4 + c4 * c6 * c6s5 * s2 * s3) * c5 + (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * c6s6 * s5;
  ow::Scalar b64 = (s4s3s2 - c4c3s2 - c4s3c2 - c3c2s4) * c5 * c5 * c6 + (c2 * s3 * s4 - c2 * c3 * c4 + c3 * s2 * s4 + c4 * s2 * s3) * c5 * s6;
  ow::Scalar b65 = (c3 * c4 - s3 * s4) * c2 * c6 + (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * c5 * s6 + (-c3 * s2 * s4 - c4 * s2 * s3) * c6 + 2 * ((c2 * c5c5 * s3 * s4 + c3 * c5c5 * s2 * s4 + c4 * c5c5 * s2 * s3 - c2 * c3 * c4 * c5c5) * c6);
  ow::Scalar b66 = (c3 * c4 - s3 * s4) * c2 + ((-s2 * s4) * c3 + (-s2) * c4 * s3) + 2 * ((c2 * s3 * s4 - c2 * c3 * c4 + c3 * s2 * s4 + c4 * s2 * s3) * c5c5);
  ow::Scalar b67 = c2 * s3 + c3 * s2;
  ow::Scalar b68 = c5c5 * c6c6 * c4c3s2 - c5c5 * c6c6 * s4s3s2 + (c3c2s4 + c4s3c2) * c5c5 * c6c6 - c6c6 * c4c3s2 + c6c6 * s4s3s2 + (-c3c2s4 - c4s3c2) * c6c6 + 0.5 * (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2);
  ow::Scalar b69 = (s4s3s2 - c4c3s2 - c4s3c2 - c3c2s4) * c5 * c5 + 0.5 * (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2);
  ow::Scalar b74 = 0.5 * ((c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * c5);
  ow::Scalar b75 = (s4s3s2 - c4c3s2 - c4s3c2 - c3c2s4) * c5 * c6c6 + (c2 * s3 * s4 - c2 * c3 * c4 + c3 * s2 * s4 + c4 * s2 * s3) * c6 * s6 + 0.5 * ((c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * c5);
  ow::Scalar b76 = (c3 * c4 - s3 * s4) * c2 + ((-s2 * s4) * c3 + (-s2) * c4 * s3) + 2 * ((c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * c5 * c6 * s6 + (c2 * s3 * s4 - c2 * c3 * c4 + c3 * s2 * s4 + c4 * s2 * s3) * c6 * c6);
  ow::Scalar b79 = (c2 * s3 * s4 - c2 * c3 * c4 + c3 * s2 * s4 + c4 * s2 * s3) * c5;
  ow::Scalar b80 = (c2 * s3 * s4 * s6 + c3 * s2 * s4 * s6 + c4 * s2 * s3 * s6 - c2 * c3 * c4 * s6) * s5 + 2 * ((s4s3s2 - c4c3s2 - c4s3c2 - c3c2s4) * c5 * c6 * s5);
  ow::Scalar b81 = (c2 * s3 * s4 * s5 + c3 * s2 * s4 * s5 + c4 * s2 * s3 * s5 - c2 * c3 * c4 * s5) * c6 + 2 * ((c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * c5 * s5 * s6);
  ow::Scalar b82 = (s4s3s2 - c4c3s2 - c4s3c2 - c3c2s4) * c5 * c5 + (c2 * c3 * c4 * c6 * s6 - c2 * c6 * s3 * s4 * s6 - c3 * c6 * s2 * s4 * s6 - c4 * c6 * s2 * s3 * s6) * c5 + (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * c5c5 * c6c6 + 0.5 * (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2);
  ow::Scalar b83 = (s4s3s2 - c4c3s2 - c4s3c2 - c3c2s4) * c5 * c5 + (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2);
  ow::Scalar b84 = (s4s3s2 - c4s3c2) * c5 * c5 * c6 - c5 * c5 * c6 * c4c3s2 - c5 * c5 * c6 * c3c2s4 + c6 * c3c2s4 + c6 * c4c3s2 + (c4s3c2 - s4s3s2) * c6;
  ow::Scalar b85 = (s4s3s2 - c4s3c2) * c5 * c5 * s6 - c5 * c5 * c4c3s2 * s6 - c5 * c5 * c3c2s4 * s6 + c3c2s4 * s6 + c4c3s2 * s6 + (c4s3c2 - s4s3s2) * s6;
  ow::Scalar b86 = (c2 * s3 * s4 * s6 + c3 * s2 * s4 * s6 + c4 * s2 * s3 * s6 - c2 * c3 * c4 * s6) * c5 * c6 + (s4s3s2 - c4c3s2 - c4s3c2 - c3c2s4) * c5c5 * c6c6 + 0.5 * (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2);
  ow::Scalar b87 = (c2 * s3 + c3 * s2) * s5;
  ow::Scalar b88 = (c2 * c3 * c4 - c2 * s3 * s4 - c3 * s2 * s4 - c4 * s2 * s3) * c5 + 2 * ((c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * c5 * c5 * c6 * s6 + (c2 * s3 * s4 - c2 * c3 * c4 + c3 * s2 * s4 + c4 * s2 * s3) * c5 * c6 * c6);
  ow::Scalar b89 = c5c5 - 1 + 2 * (c6c6 - c6 * c6 * c5c5);
  ow::Scalar b90 = c6 - 2 * c6 * c5c5;
  ow::Scalar b91 = c6s6 - c6 * c5c5 * s6;
  ow::Scalar b92 = c5s5 - c6c6c5s5;
  ow::Scalar b93 = c3 * c4 - s3 * s4;
  ow::Scalar b94 = c3 * c5c4 - c5 * s3 * s4;
  ow::Scalar b95 = -s6 + 2 * c5c5 * s6;
  ow::Scalar b96 = -1 + 2 * c5c5;
  ow::Scalar b97 = c3 * s5s4 + c4 * s3 * s5;
  ow::Scalar b98 = c5 - 2 * c6 * c6c5;
  ow::Scalar b99 = c6c6 * s5 - 0.5 * s5;
  ow::Scalar b100 = (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * c6 * s5;
  ow::Scalar b101 = (c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * s5 * s6;
  ow::Scalar b102 = -1 + 2 * c6c6;
  ow::Scalar d2 = a93 - a98;
  ow::Scalar d3 = a122 - a154;
  ow::Scalar d4 = a48 + a49 + a50;
  ow::Scalar d5 = (qp(1) + qp(2) + qp(3)) * I513;
  ow::Scalar d7 = a76 + a77 + a78;
  ow::Scalar d8 = a79 + a81 + a82;
  ow::Scalar d10 = a87 + a88 + a89;
  ow::Scalar d11 = a95 + a96 + a97;
  ow::Scalar d12 = (qp(1) + qp(2) + qp(3)) * I512;
  ow::Scalar d15 = a52 + a53 + a54 - a137 - a138 - a140;
  ow::Scalar d18 = a156 + a157 + a158 + a159;
  ow::Scalar d23 = a147 + a148;
  ow::Scalar d24 = a141 + a142;
  ow::Scalar d25 = a161 + a162;
  ow::Scalar d26 = (I523 - L5 * L12 * m6) * qp(0);
  ow::Scalar d27 = (qp(1) + qp(2) + qp(3)) * I413;
  ow::Scalar d28 = a236 + a237 + a238;
  ow::Scalar d29 = I423 * qp(1) + I423 * qp(2) + qp(3) * I423 + (L5 * m6 + L11 * m5) * L4 * qp(1) + (L5 * m6 + L11 * m5) * L4 * qp(2) + (L5 * m6 * qp(3) + L11 * m5 * qp(3)) * L4;
  ow::Scalar d30 = a72 - a68 + a86;
  ow::Scalar d31 = a181 + a185 - a203;
  ow::Scalar d32 = (m4 + m5 + m6) * L2 * L3 * qp(0) + (L9 * m3) * L2 * qp(0);
  ow::Scalar d33 = (m6 * L5 * L5 + m5 * L11 * L11 + I411 - I422) * qp(0) - a182;
  ow::Scalar d34 = (m4 + m5 + m6) * L3 * L3 * qp(0) + (m3 * L9 * L9 - I311 + I322) * qp(0);
  ow::Scalar d35 = (qp(1) + qp(2)) * I323;
  ow::Scalar d36 = (L5 * m6 + L11 * m5) * L3 * qp(0);
  ow::Scalar d37 = (L5 * m6 + L11 * m5) * L2 * qp(0);
  ow::Scalar d38 = a52 + a53 + a54 - a137 - a138 + a139 - a140;
  ow::Scalar d39 = (m5 + m6) * L3 * L4 * qp(1) + (m5 + m6) * L3 * L4 * qp(2) + (L10 * m4) * L3 * qp(1) + (L10 * m4) * L3 * qp(2) + (-I313) * qp(1) + (-I313) * qp(2);
  ow::Scalar d40 = a69 + a70 + a71 + a83 + a84 + a85 - a90 - a91 - a92 - a118 - a119 - a120;
  ow::Scalar d41 = a80 - a94;
  ow::Scalar d42 = a73 + a74 + a75;
  ow::Scalar d43 = a118 + a119 + a120;
  ow::Scalar d44 = a181 + a185 - a187 - a203;
  ow::Scalar d46 = a69 + a70 + a71 + a83 + a84 + a85 - a90 - a91 - a92;
  ow::Scalar d47 = a183 - a188;
  ow::Scalar d48 = a83 + a84 + a85;
  ow::Scalar d49 = a76 + a77 + a78 - a95 - a96 - a97;
  ow::Scalar d50 = a155 + a161 + a162;
  ow::Scalar d51 = a141 + a142 + a156 + a157 + a158 + a159;
  ow::Scalar d52 = a181 + a185 - a187;

  C(0, 0) = (I311 - I322 - L3 * L3 * m4 - L3 * L3 * m5 - L3 * L3 * m6 - L9 * L9 * m3) * b13 * qp(1) + (I311 - I322 - L3 * L3 * m4 - L3 * L3 * m5 - L3 * L3 * m6 - L9 * L9 * m3) * b13 * qp(2) + (I422 - m5 * L11 * L11 - I411 - m6 * L5 * L5) * b39 * qp(1) + (I422 - m5 * L11 * L11 - I411 - m6 * L5 * L5) * b39 * qp(2) + (a73 - m5 * qp(3) * L11 * L11 - m6 * qp(3) * L5 * L5 + a74 + a75 - I411 * qp(3) + I422 * qp(3)) * b39 + (I212 * b33 - I312 * b12 + I412 * b38 + I211 * c2s2 - I222 * c2s2 - L2 * L2 * c2s2 * m3 - L2 * L2 * c2s2 * m4 - L2 * L2 * c2s2 * m5 - L2 * L2 * c2s2 * m6 - L8 * L8 * c2s2 * m2) * qp(1) + (I412 * b38 - I312 * b12) * qp(2) + (a44 * b24 - a43 * b25 + a51 * b18 + a55 * b26 - a90 * b5 - a91 * b5 + a68 * b29 - a92 * b5 - a69 * b31 - a70 * b31 - a72 * b29 - a71 * b31 - a80 * b27 + a94 * b19 - a83 * b31 - a84 * b31 - a86 * b29 - a85 * b31 - a130 * b2 - a126 * b16 - a129 * b16 + a131 * b15 + a118 * b31 + a119 * b31 + a121 * b29 + a120 * b31 - a133 * b22 - a134 * b22 - a123 * b34 - a135 * b22 - a136 * b22 - a124 * b36 + a132 * b28 + a143 * b17 - a125 * b36 - a127 * b36 - a128 * b36 + a160 * b8 - a149 * b23 - a150 * b35 - a151 * b35 - a152 * b35 - a153 * b35 - a155 * b40 - b1 * d3 + b6 * d4 + b4 * d12 - b10 * d8 - b11 * d7 - b7 * d18 + b14 * d11 - b3 * d23 + b21 * d5 + b9 * d25 + b37 * d2 + b30 * d10 - b20 * d24 + b32 * d15 - a139 * s5 + I412 * b38 * qp(3));
  C(0, 1) = (-L4 * m5 - L4 * m6 - L10 * m4) * L2 * c2 * qp(1) + I213 * c2 * qp(1) + (-a155 * c5) * c2 + (a173 - a174 - a192 - a193 - a194 - a196 - a199) * c2s2 + (-I223 * s2) * qp(1) + (a44 * b58 - a43 * b54 - a51 * b55 + a55 * b56 - a80 * b62 + a94 * b68 + a121 * b49 - a132 * b41 + a168 * b6 - a163 * b12 + a123 * b64 + a167 * b21 + a131 * b59 - a187 * b5 - a183 * b11 - a184 * b10 + a164 * b33 + a188 * b14 + a165 * b38 + a186 * b30 + a227 * b4 - a228 * b3 + a207 * b52 + a218 * b53 - a235 * b40 - b13 * d34 - b42 * d7 - b44 * d8 + b47 * d5 - b51 * d2 - b22 * d32 - b20 * d37 + b32 * d26 + b57 * d4 - b31 * d31 - b43 * d27 - b36 * d36 - b39 * d33 - b45 * d29 + b63 * d11 - b65 * d10 - b48 * d28 - b66 * d12 + b46 * d38 - b61 * d23 + b50 * d40 - b60 * d39 + b69 * d30 - b67 * d35);
  C(0, 2) = a44 * b58 - a43 * b54 - a51 * b55 + a55 * b56 - a80 * b62 + a94 * b68 + a121 * b49 - a132 * b41 + a168 * b6 - a163 * b12 + a123 * b64 + a167 * b21 + a131 * b59 - a187 * b5 - a183 * b11 - a184 * b10 + a188 * b14 + a165 * b38 + a186 * b30 + a227 * b4 - a228 * b3 + a235 * b9 + a207 * b52 + a218 * b53 - b7 * d37 - b13 * d34 - b42 * d7 - b44 * d8 + b47 * d5 - b51 * d2 + b32 * d26 + b57 * d4 - b31 * d31 - b35 * d32 - b43 * d27 - b36 * d36 - b39 * d33 - b45 * d29 + b63 * d11 - b65 * d10 - b48 * d28 - b66 * d12 + b46 * d38 - b61 * d23 + b50 * d40 - b60 * d39 + b69 * d30 - b67 * d35;
  C(0, 3) = a44 * b58 - a43 * b54 - a51 * b55 + a55 * b56 - a80 * b62 + a94 * b68 + a121 * b49 - a132 * b41 + a168 * b6 + a123 * b64 + a167 * b21 + a131 * b59 - a187 * b5 - a183 * b11 - a184 * b10 + a188 * b14 + a165 * b38 + a186 * b30 + a227 * b4 + a235 * b9 - a228 * b23 + a207 * b52 + a218 * b53 - b7 * d37 - b42 * d7 - b16 * d36 - b44 * d8 + b47 * d5 - b51 * d2 + b32 * d26 + b57 * d4 - b31 * d31 - b43 * d27 - b39 * d33 - b45 * d29 + b63 * d11 - b65 * d10 - b48 * d28 - b66 * d12 + b46 * d38 + b50 * d40 + b69 * d30;
  C(0, 4) = (s4s3s2 - c4c3s2 - c4s3c2 - c3c2s4) * a131 * s5 + (a154 - a122 + a236 + a237 + a238) * b46 + (a160 * c2 + a55 * c6 * c3c2s4 + a55 * c6 * c4c3s2 + a55 * c6 * c4s3c2 + a51 * c3c2s4 * s6 + a51 * c4c3s2 * s6 + a51 * c4s3c2 * s6 - a55 * c6 * s4s3s2 - a51 * s6 * s4s3s2) * c5 + (c6s6 * d41 * s4s3s2 - c3c2s4 * c6s6 * d41 - c4c3s2 * c6s6 * d41 - c6s6 * c4s3c2 * d41 - a239) * s5 + (a44 * b76 - a167 * b2 - a130 * b47 + a168 * b15 - a139 * b48 + a183 * b19 + a143 * b61 + a186 * b18 + a184 * b26 - a188 * b27 + a235 * b8 + a228 * b17 - a227 * b25 - a218 * b74 - b1 * d26 + b59 * d4 + b56 * d8 - b55 * d10 - b54 * d12 - b29 * d44 - b62 * d11 + b68 * d7 + b75 * d2 + b49 * d43 + b52 * d42 + b69 * d46) + 2 * ((c3c2s4 + c4c3s2 + c4s3c2 - s4s3s2) * a131 * c6c6 * s5);
  C(0, 5) = (c6 * s4s3s2 - c6 * c4c3s2 - c6 * c4s3c2 - c6 * c3c2s4) * a123 * c5 + (c2 * s3 * s4 - c2 * c3 * c4 + c3 * s2 * s4 + c4 * s2 * s3) * a123 * s6 + (s4s3s2 - c4c3s2 - c4s3c2 - c3c2s4) * a132 * c5 * s6 + (c2 * c3 * c4 * c6 - c3 * c6 * s2 * s4 - c4 * c6 * s2 * s3 - c2 * c6 * s3 * s4) * a132 + (a168 * b24 - a86 * b74 + a131 * b76 + a186 * b28 - a184 * b34 - b41 * d10 + b58 * d4 + b64 * d8 + b37 * d47 - b51 * d49 + b53 * d48 - b75 * d41);
  C(1, 0) = (a174 - a173 + a192 + a193 + a194 + a196 + a199) * c2s2 + (a44 * b58 - a43 * b54 + a51 * b80 + a55 * b81 - a80 * b82 - a168 * b6 + a163 * b12 - a94 * b86 - a167 * b21 + a187 * b5 + a183 * b11 + a184 * b10 - a164 * b33 - a188 * b14 - a165 * b38 - a121 * b83 + a123 * b84 + a130 * b79 - a186 * b30 + a132 * b85 - a131 * b88 + a143 * b87 - a227 * b4 + a228 * b3 - a207 * b52 - a218 * b53 + a235 * b40 + b13 * d34 - b48 * d3 - b51 * d2 + b22 * d32 + b20 * d37 - b32 * d26 + b31 * d31 + b36 * d36 + b39 * d33 + b69 * d30 + a160 * s2 * s5);
  C(1, 1) = (a126 + a129) * c4 + (a68 - a72 - a86 + a121) * c5s5 + (-a150 - a151 - a152 - a153) * s3 + (a43 * b96 - a44 * b89 - a51 * b90 - a55 * b95 + a80 * b92 - a160 * b94 - a143 * c5c4 - a123 * c6c5s5 - a132 * c5s5s6 + a94 * c6c6c5s5 - b91 * d2 + b93 * d18 + b97 * d25 + a149 * s5s4) - 2 * a131 * c6c5s6s5;
  C(1, 2) = (a126 + a129) * c4 + (a68 - a72 - a86 + a121) * c5s5 + (-a133 - a134 - a135 - a136 - a150 - a151 - a152 - a153) * s3 + (a43 * b96 - a44 * b89 - a51 * b90 - a55 * b95 + a80 * b92 - a160 * b94 - a143 * c5c4 - a123 * c6c5s5 - a132 * c5s5s6 + a94 * c6c6c5s5 - b91 * d2 + b93 * d51 + b97 * d50 + a149 * s5s4) - 2 * a131 * c6c5s6s5;
  C(1, 3) = (a124 + a125 + a126 + a127 + a128 + a129) * c4 + (a68 - a72 - a86 + a121) * c5s5 + (a147 + a148 + a149) * s5s4 + (a43 * b96 - a44 * b89 - a51 * b90 - a55 * b95 + a80 * b92 - a160 * b94 - a143 * c5c4 - a123 * c6c5s5 - a132 * c5s5s6 + a94 * c6c6c5s5 - b91 * d2 + b93 * d51 + b97 * d50) - 2 * a131 * c6c5s6s5;
  C(1, 4) = (-a147 - a148 - a149) * c5c4 + (a90 - a70 - a71 - a83 - a84 - a85 - a69 + a91 + a92 + a118 + a119 + a120) * c5s5 + (a76 + a77 + a78) * c6c6c5s5 + (a154 - a122 + a235 * s2) * s5 + (a131 * b98 - a182 * b52 + a167 * b79 - a168 * b88 + a160 * b97 + a184 * b81 + a186 * b80 - a183 * b86 - a188 * b82 - a227 * b54 - a203 * b83 + a228 * b87 + a130 * c5 + a80 * c6c5s6 - a94 * c6c5s6 + a55 * c6s5 - b48 * d26 - b90 * d10 - b99 * d2 + b92 * d11 - b95 * d8 + b96 * d12 + b69 * d52 - b94 * d50 + a51 * s6s5 + a143 * s5s4) + 2 * ((-a48 - a49 - a50) * c6c5s6s5 + a44 * c6s6s5) - 0.5 * a218 * s5;
  C(1, 5) = (-a79 - a81 - a82) * c6c5s5 + (-a87 - a88 - a89) * c5s5s6 + (a168 * b58 - a185 * b53 + a184 * b84 + a186 * b85 - a123 * c6s5 - b89 * d4 - b51 * d47 - b91 * d49 + b99 * d41 - a132 * s6s5) + 2 * a131 * c6s6s5 - 0.5 * a86 * s5;
  C(2, 0) = a44 * b58 - a43 * b54 + a51 * b80 + a55 * b81 - a80 * b82 - a168 * b6 + a163 * b12 - a94 * b86 - a167 * b21 + a187 * b5 + a183 * b11 + a184 * b10 - a188 * b14 - a165 * b38 - a121 * b83 + a123 * b84 + a130 * b79 - a186 * b30 + a132 * b85 - a131 * b88 + a143 * b87 - a227 * b4 + a228 * b3 - a235 * b9 - a207 * b52 - a218 * b53 + b7 * d37 + b13 * d34 - b48 * d3 - b51 * d2 - b32 * d26 + b31 * d31 + b35 * d32 + b36 * d36 + b39 * d33 + b69 * d30;
  C(2, 1) = (a126 + a129) * c4 + (a68 - a72 - a86 + a121) * c5s5 + (a133 + a134 + a135 + a136) * s3 + (a43 * b96 - a44 * b89 - a51 * b90 - a55 * b95 + a80 * b92 - a155 * b97 - a143 * c5c4 - a123 * c6c5s5 - a132 * c5s5s6 + a94 * c6c6c5s5 - b91 * d2 - b93 * d24 + a149 * s5s4) - 2 * a131 * c6c5s6s5;
  C(2, 2) = (a126 + a129) * c4 + (a68 - a72 - a86 + a121) * c5s5 + (a43 * b96 - a44 * b89 - a51 * b90 - a55 * b95 + a80 * b92 - a143 * c5c4 - a123 * c6c5s5 - a132 * c5s5s6 + a94 * c6c6c5s5 - b91 * d2 + a149 * s5s4) - 2 * a131 * c6c5s6s5;
  C(2, 3) = (a124 + a125 + a126 + a127 + a128 + a129) * c4 + (a68 - a72 - a86 + a121) * c5s5 + (a147 + a148 + a149) * s5s4 + (a43 * b96 - a44 * b89 - a51 * b90 - a55 * b95 + a80 * b92 - a143 * c5c4 - a123 * c6c5s5 - a132 * c5s5s6 + a94 * c6c6c5s5 - b91 * d2) - 2 * a131 * c6c5s6s5;
  C(2, 4) = (-a147 - a148 - a149) * c5c4 + (a80 - a94) * c6c5s6 + (a90 - a70 - a71 - a83 - a84 - a85 - a69 + a91 + a92 + a118 + a119 + a120) * c5s5 + (a76 + a77 + a78) * c6c6c5s5 + (a131 * b98 - a182 * b52 + a167 * b79 - a168 * b88 + a184 * b81 + a186 * b80 - a183 * b86 - a188 * b82 - a227 * b54 - a203 * b83 + a228 * b87 + a130 * c5 + a55 * c6s5 - b48 * d26 - b90 * d10 - b99 * d2 + b92 * d11 - b95 * d8 + b96 * d12 + b69 * d52 - a122 * s5 + a154 * s5 + a51 * s6s5 + a143 * s5s4) + 2 * ((-a48 - a49 - a50) * c6c5s6s5 + a44 * c6s6s5) - 0.5 * a218 * s5;
  C(2, 5) = (-a79 - a81 - a82) * c6c5s5 + (-a87 - a88 - a89) * c5s5s6 + (a168 * b58 - a185 * b53 + a184 * b84 + a186 * b85 - a123 * c6s5 - b89 * d4 - b51 * d47 - b91 * d49 + b99 * d41 - a132 * s6s5) + 2 * a131 * c6s6s5 - 0.5 * a86 * s5;
  C(3, 0) = a44 * b58 - a43 * b54 + a51 * b80 + a55 * b81 - a80 * b82 - a168 * b6 - a94 * b86 - a167 * b21 + a187 * b5 + a183 * b11 + a184 * b10 - a188 * b14 - a165 * b38 - a121 * b83 + a123 * b84 + a130 * b79 - a186 * b30 + a132 * b85 - a131 * b88 - a227 * b4 - a235 * b9 + a228 * b23 - a207 * b52 - a218 * b53 + b7 * d37 - b48 * d3 + b16 * d36 - b51 * d2 - b32 * d26 + b31 * d31 + b39 * d33 + b69 * d30;
  C(3, 1) = (-a124 - a125 - a127 - a128) * c4 + (a68 - a72 - a86 + a121) * c5s5 + (-a147 - a148) * s5s4 + (a43 * b96 - a44 * b89 - a51 * b90 - a55 * b95 + a80 * b92 - a155 * b97 - a123 * c6c5s5 - a132 * c5s5s6 + a94 * c6c6c5s5 - b91 * d2 - b93 * d24) - 2 * a131 * c6c5s6s5;
  C(3, 2) = (-a124 - a125 - a127 - a128) * c4 + (a68 - a72 - a86 + a121) * c5s5 + (-a147 - a148) * s5s4 + (a43 * b96 - a44 * b89 - a51 * b90 - a55 * b95 + a80 * b92 - a123 * c6c5s5 - a132 * c5s5s6 + a94 * c6c6c5s5 - b91 * d2) - 2 * a131 * c6c5s6s5;
  C(3, 3) = (a68 - a72 - a86 + a121) * c5s5 + (a43 * b96 - a44 * b89 - a51 * b90 - a55 * b95 + a80 * b92 - a123 * c6c5s5 - a132 * c5s5s6 + a94 * c6c6c5s5 - b91 * d2) - 2 * a131 * c6c5s6s5;
  C(3, 4) = (a80 - a94) * c6c5s6 + (a90 - a70 - a71 - a83 - a84 - a85 - a69 + a91 + a92 + a118 + a119 + a120) * c5s5 + (a76 + a77 + a78) * c6c6c5s5 + (a154 - a122) * s5 + (a131 * b98 - a182 * b52 + a167 * b79 - a168 * b88 + a184 * b81 + a186 * b80 - a183 * b86 - a188 * b82 - a227 * b54 - a203 * b83 + a130 * c5 + a55 * c6s5 - b48 * d26 - b90 * d10 - b99 * d2 + b92 * d11 - b95 * d8 + b96 * d12 + b69 * d52 + a51 * s6s5) + 2 * ((-a48 - a49 - a50) * c6c5s6s5 + a44 * c6s6s5) - 0.5 * a218 * s5;
  C(3, 5) = (-a79 - a81 - a82) * c6c5s5 + (-a87 - a88 - a89) * c5s5s6 + (a168 * b58 - a185 * b53 + a184 * b84 + a186 * b85 - a123 * c6s5 - b89 * d4 - b51 * d47 - b91 * d49 + b99 * d41 - a132 * s6s5) + 2 * a131 * c6s6s5 - 0.5 * a86 * s5;
  C(4, 0) = (a239 - a155 * s2) * s5 + (a44 * b76 + a167 * b2 - a168 * b15 - a183 * b19 - a186 * b18 - a184 * b26 + a188 * b27 - a123 * b101 + a132 * b100 - a235 * b8 - a228 * b17 + a227 * b25 + a218 * b74 + b1 * d26 + b48 * d15 + b54 * d12 + b29 * d44 + b75 * d2 - b79 * d5 - b81 * d8 - b80 * d10 + b88 * d4 + b82 * d11 + b86 * d7 + b52 * d42 - b87 * d23 - b69 * d46 + b83 * d43);
  C(4, 1) = (a147 + a148) * c5c4 + (a69 + a70 + a71 + a83 + a84 + a85 - a90 - a91 - a92 - a118 - a119 - a120) * c5s5 + (-a76 - a77 - a78) * c6c6c5s5 + (a182 * b52 - a167 * b79 + a155 * b94 + a168 * b88 - a184 * b81 - a186 * b80 + a183 * b86 + a188 * b82 + a227 * b54 + a203 * b83 - a228 * b87 - a132 * c6c5 + a123 * c5s6 + b48 * d26 + b90 * d10 - b99 * d2 - b92 * d11 + b95 * d8 - b96 * d12 - b69 * d52 - a235 * s2 * s5) + 2 * ((a48 + a49 + a50) * c6c5s6s5 + a44 * c6s6s5) + 0.5 * a218 * s5;
  C(4, 2) = (a147 + a148) * c5c4 + (a69 + a70 + a71 + a83 + a84 + a85 - a90 - a91 - a92 - a118 - a119 - a120) * c5s5 + (-a76 - a77 - a78) * c6c6c5s5 + (a182 * b52 - a167 * b79 + a168 * b88 - a184 * b81 - a186 * b80 + a183 * b86 + a188 * b82 + a227 * b54 + a203 * b83 - a228 * b87 - a132 * c6c5 + a123 * c5s6 + b48 * d26 + b90 * d10 - b99 * d2 - b92 * d11 + b95 * d8 - b96 * d12 - b69 * d52) + 2 * ((a48 + a49 + a50) * c6c5s6s5 + a44 * c6s6s5) + 0.5 * a218 * s5;
  C(4, 3) = (a69 + a70 + a71 + a83 + a84 + a85 - a90 - a91 - a92 - a118 - a119 - a120) * c5s5 + (-a76 - a77 - a78) * c6c6c5s5 + (a182 * b52 - a167 * b79 + a168 * b88 - a184 * b81 - a186 * b80 + a183 * b86 + a188 * b82 + a227 * b54 + a203 * b83 - a132 * c6c5 + a123 * c5s6 + b48 * d26 + b90 * d10 - b99 * d2 - b92 * d11 + b95 * d8 - b96 * d12 - b69 * d52) + 2 * ((a48 + a49 + a50) * c6c5s6s5 + a44 * c6s6s5) + 0.5 * a218 * s5;
  C(4, 4) = (a93 - a98) * c6s6 + a44 * b102;
  C(4, 5) = (-a87 - a88 - a89) * c6c5 + (a79 + a81 + a82) * c5s6 + (a94 - a80) * c6s6 + (a131 * b102 + a168 * b76 + a185 * b74 - a184 * b101 + a186 * b100 - a132 * c6 + b75 * d47 - b99 * d49 + a123 * s6) + 2 * ((a48 + a49 + a50) * c6s6s5) + 0.5 * ((a83 + a84 + a85) * s5);
  C(5, 0) = a55 * b101 - a51 * b100 - a86 * b74 - a168 * b24 - a131 * b76 - a186 * b28 + a184 * b34 - b58 * d4 - b37 * d47 - b84 * d8 - b85 * d10 + b51 * d49 + b53 * d48 + b75 * d41;
  C(5, 1) = (a79 + a81 + a82) * c6c5s5 + (a87 + a88 + a89) * c5s5s6 + (a185 * b53 - a168 * b58 - a184 * b84 - a186 * b85 + a51 * c6c5 - a55 * c5s6 + b89 * d4 + b51 * d47 + b91 * d49 - b99 * d41) - 2 * a131 * c6s6s5 - 0.5 * a86 * s5;
  C(5, 2) = (a79 + a81 + a82) * c6c5s5 + (a87 + a88 + a89) * c5s5s6 + (a185 * b53 - a168 * b58 - a184 * b84 - a186 * b85 + a51 * c6c5 - a55 * c5s6 + b89 * d4 + b51 * d47 + b91 * d49 - b99 * d41) - 2 * a131 * c6s6s5 - 0.5 * a86 * s5;
  C(5, 3) = (a79 + a81 + a82) * c6c5s5 + (a87 + a88 + a89) * c5s5s6 + (a185 * b53 - a168 * b58 - a184 * b84 - a186 * b85 + a51 * c6c5 - a55 * c5s6 + b89 * d4 + b51 * d47 + b91 * d49 - b99 * d41) - 2 * a131 * c6s6s5 - 0.5 * a86 * s5;
  C(5, 4) = (a87 + a88 + a89) * c6c5 + (-a79 - a81 - a82) * c5s6 + (a80 - a94) * c6s6 + (a184 * b101 - a168 * b76 - a185 * b74 - a131 * b102 - a186 * b100 - b75 * d47 + b99 * d49) + 2 * ((-a48 - a49 - a50) * c6s6s5) + 0.5 * ((-a83 - a84 - a85) * s5);
}

#endif